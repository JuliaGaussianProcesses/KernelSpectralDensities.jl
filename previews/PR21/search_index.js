var documenterSearchIndex = {"docs":
[{"location":"feature_functions/#Feature-functions","page":"Feature Functions","title":"Feature functions","text":"","category":"section"},{"location":"feature_functions/","page":"Feature Functions","title":"Feature Functions","text":"KernelSpectralDensities.AbstractRFF\nKernelSpectralDensities.ShiftedRFF\nKernelSpectralDensities.DoubleRFF\nKernelSpectralDensities.ApproximateGPSample","category":"page"},{"location":"feature_functions/#KernelSpectralDensities.AbstractRFF","page":"Feature Functions","title":"KernelSpectralDensities.AbstractRFF","text":"AbstractRFF\n\nAbstract type defining a random Fourier feature function. \n\n\n\n\n\n","category":"type"},{"location":"feature_functions/#KernelSpectralDensities.ShiftedRFF","page":"Feature Functions","title":"KernelSpectralDensities.ShiftedRFF","text":"ShiftedRFF([rng::AbstractRNG], S::SpectralDensity, l::Int)\n\nRandom Fourier feature function with a random shift, projecting an input x into l dimensionional feature space. \n\nDefinition\n\nThis feature function is defined as \n\n    sqrt2  l  cos(2  π  ((w^T  x) + b))\n\nwhere w sampled from the spectral density S, b is uniformly sampled from [0, 2π] and l is the number of sampled frequencies.\n\nExamples\n\njulia> k = SqExponentialKernel();\n\njulia> S = SpectralDensity(k, 1);\n\njulia> rff = ShiftedRFF(S, 2);\n\njulia> rff(1.);\n\n\n\n\n\n","category":"type"},{"location":"feature_functions/#KernelSpectralDensities.DoubleRFF","page":"Feature Functions","title":"KernelSpectralDensities.DoubleRFF","text":"DoubleRFF([rng::AbstractRNG], S::SpectralDensity, l::Int)\n\nRandom Fourier feature function with cos and sin terms, projecting an input x into l dimensionional feature space.\n\nDefinition\n\nThis feature function is defined as\n\n    sqrt1  l cos(2 π w x)  sin(2 π w x)\n\nwhere w sampled from the spectral density S, with a total of l/2 sampled frequencies. The output will be the result of [cos(...w_1), cos(...w_2), ..., cos(...w_l/2), sin(...w_1), sin(...w_2), ..., sin(...w_l/2)].\n\nExamples\n\njulia> k = SqExponentialKernel();\n\njulia> S = SpectralDensity(k, 1);\n\njulia> rff = DoubleRFF(S, 2);\n\njulia> rff(1.);\n\n\n\n\n\n","category":"type"},{"location":"feature_functions/#KernelSpectralDensities.ApproximateGPSample","page":"Feature Functions","title":"KernelSpectralDensities.ApproximateGPSample","text":"ApproximateGPSample(rff::AbstractRFF)\n\nAn approximate sample from the GP prior defined by the kernel that corresponds to the spectral density S that the RFF rff is based on.\n\nDefinition\n\nUsing the random Fourier feature function f(x), we can define the Bayesian linear model \n\n    f(x) = w f(x)\n\nwhere w_i ~ N(0, 1), i = 1,...,l and f(x) is the random Fourier feature function evaluated at x with l feature dimensions.  Each draw of w results in a different function sample from the GP prior.\n\nExamples\n\njulia> k = SqExponentialKernel();\n\njulia> S = SpectralDensity(k, 1);\n\njulia> rff = ShiftedRFF(S, 2);\n\njulia> ap = ApproximateGPSample(rff);\n\njulia> ap(1.);\n\n\n\n\n\n","category":"type"},{"location":"densities/#Spectral-Densities","page":"Spectral Densities","title":"Spectral Densities","text":"","category":"section"},{"location":"densities/","page":"Spectral Densities","title":"Spectral Densities","text":"A kernel k(xy) is described as stationary or shift-invariant, if it can be written as k(τ) = k(x-y), which means that it only depends on the difference between x and y but not their absolute values. ","category":"page"},{"location":"densities/","page":"Spectral Densities","title":"Spectral Densities","text":"For a given stationary kernel k(τ), the spectral density is its Fourier transform","category":"page"},{"location":"densities/","page":"Spectral Densities","title":"Spectral Densities","text":"S(omega) = int_-infty^infty k(τ) e^-2 pi omega^T tau dtau","category":"page"},{"location":"densities/","page":"Spectral Densities","title":"Spectral Densities","text":"note: Note\nThe exact form of the Fourier transform may change slightly between fields (see Details and Options).  This package uses the \"signal processing\" form above, as done in this presentation by Markus Heinonen. However, Rahimi & Recht used the \"classical physics\" form for example.  All options are equivalent, if applied consistently.","category":"page"},{"location":"densities/","page":"Spectral Densities","title":"Spectral Densities","text":"    KernelSpectralDensities.SpectralDensity\n    Base.rand(::KernelSpectralDensities.AbstractSpectralDensity, ::Int64)","category":"page"},{"location":"densities/#KernelSpectralDensities.SpectralDensity","page":"Spectral Densities","title":"KernelSpectralDensities.SpectralDensity","text":"SpectralDensity{K<:Kernel}(k::Kernel, dim::Int)\n\nSpectral density for the kernel K for dim dimensional frequency space. \n\nDefinition\n\nGiven a stationary kernel k(x x) the spectral density is the Fourier transform of k(τ) = k(x-x).  It can be seen as a probablity density function over the frequency domain, and can be evaluated at any frequency w. \n\nExamples\n\njulia> k = SqExponentialKernel();\n\njulia> S = SpectralDensity(k, 1);\n\njulia> S(0.0)\n2.5066282746310007\n\njulia> S = SpectralDensity(k, 2);\n\njulia> S(zeros(2))\n6.2831853071795845\n\n\n\n\n\n","category":"type"},{"location":"densities/#Base.rand-Tuple{KernelSpectralDensities.AbstractSpectralDensity, Int64}","page":"Spectral Densities","title":"Base.rand","text":"rand(S::AbstractSpectralDensity, [n::Int])\n\nGenerate a sample [n samples] from the spectral density S.  For a spectral density over ω in R, computing nsamples results in andimensional vector.  For a spectral density overω \\in R^d, d>1, computingnsamples results in ad,n` matrix. \n\nExamples\n\njulia> k = SqExponentialKernel();\n\njulia> S = SpectralDensity(k, 1);\n\njulia> rand(S, 1);\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = KernelSpectralDensities","category":"page"},{"location":"#KernelSpectralDensities","page":"Home","title":"KernelSpectralDensities","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is a lightweight extension to KernelFunctions.jl, providing the spectral densities for a subset of kernels.","category":"page"}]
}
